/*  * To change this template, choose Tools | Templates * and open the template in the editor. */define('providers/edit', [	'providers',	'utils/str',	'jquery',	'gizmo/superdesk',    'jquery/utils',    'jquery/rest',    'jquery/superdesk',    'jquery/tmpl',    'jquery/avatar',	'jqueryui/draggable',    'jqueryui/texteditor',	'providers/edit/adaptor',    'tmpl!livedesk>providers/edit',    'tmpl!livedesk>providers/edit/item',], function( providers, str, $, Gizmo ) {	var PostModel = Gizmo.Model.extend({		href: 'http://localhost:8082/resources/my/LiveDesk/Blog/1/Post',	});	var PostTypeModel = Gizmo.Model.extend({});	var ownCollection = new Gizmo.Collection('http://localhost:8082/resources/my/LiveDesk/Blog/1/Post/Owned?Authorization=23&X-Filter=Id,AuthorName,Content,Type.Key,PublishedOn,CreatedOn,Author.Source.Name', PostModel);	var postTypeCollection = new Gizmo.Collection('http://localhost:8082/resources/my/Superdesk/PostType?Authorization=23&X-Filter=Key', PostTypeModel);	var PostView = Gizmo.View.extend({		events: { 			"": { "dragstart": "adaptor"}		},		render: function(){			var avatar = $.avatar.get($.superdesk.login.EMail);			var self = this;			$.tmpl('livedesk>providers/edit/item', { Post: this.model.feed(),Avatar: avatar} , function(err, out){				self.el = $(out);				if(!self.model.get('PublishedOn')) {                            self.el.draggable({                                revert: 'invalid',                                containment:'document',                                helper: 'clone',                                appendTo: 'body',                                zIndex: 2700							});                }				self.resetEvents();			});			return this;		},		adaptor: function(evt){			$(evt.target).parents('li').data("post", this.model.get('Id'));		}	});	var PostsView = Gizmo.View.extend({		init: function(){			this.posts = ownCollection;			this.posts.on('read', this.render, this);			this.posts.sync();		},		render: function(){			var self = this;			this.posts.each(function(key, model){				self.addOne(model);			});		},		insert: function(model)		{			var self = this;			this.posts.insert(model).done(function(model){				self.addOne(model, true);			});		},		addOne: function(model, order)		{			var view = new PostView({model: model, _parent: this}, { events: false, ensure: false});							if(!order)				this.el.append(view.render().el);			else				this.el.prepend(view.render().el);		}	}); 	var EditView = Gizmo.View.extend({		postView: null,		events: {			'[ci="savepost"]': { 'click': 'savepost'},			'[ci="save"]': { 'click': 'save'}		},		init: function(){			this.resetEvents();			this.postTypes = postTypeCollection;			this.postTypes.on('read', this.render, this);			this.postTypes.sync();		},		render: function(){			var self = this;			console.log(this.postTypes.feed());			this.el.tmpl('livedesk>providers/edit', { PostTypes: this.postTypes.feed() }, function(){				// editor                 fixedToolbar =                 {                    _create: function(elements)                    {                        var self = this;                        $(elements).on('toolbar-created', function()                        {                            self.plugins.toolbar.element.hide()                                .appendTo($('.edit-block .toolbar-placeholder'));                         });                         $(elements).on('focusin.texteditor keydown.texteditor click.texteditor', function(event)                        {                            self.plugins.toolbar.element.fadeIn('fast');                        });                        $(elements).on('blur.texteditor focusout.texteditor', function()                        {                             self.plugins.toolbar.element.fadeOut('fast');                         });                    }                };                self.el.find('.edit-block article.editable').texteditor({ plugins:                 {                    floatingToolbar: null,                     draggableToolbar: null,                     fixedToolbar: fixedToolbar                }});				self.postView = new PostsView({ el: $(this).find('#own-posts-results'), _parent: self});			} );		},		savepost: function(evt){			evt.preventDefault();			var data = {				Content: $.styledNodeHtml(this.el.find('.edit-block article.editable')),				Type: this.el.find('[name="type"]').val()			};					this.postView.insert(data);		},		save: function(evt){			evt.preventDefault();					}	});	var el = providers.edit.el, className = providers.edit.className, adaptor = providers.edit.adaptor;	providers.edit = new EditView(null,{init: false, ensure: false, events: false});	providers.edit.el = el;	providers.edit.className = className;	providers.edit.adaptor = adaptor;	return providers;});